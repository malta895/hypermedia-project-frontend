---
swagger: "2.0"
info:
  description: "This is a simple bookstore server with a book inventory, users and\
    \ a shopping cart."
  version: "1.0.0"
  title: "BookHub"
  contact:
    email: "luca.maltagliati@mail.polimi.it"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
- name: "book"
  description: "Available book"
- name: "cart"
  description: "Access to the cart"
- name: "user"
  description: "Operations about user"
- name: "event"
  description: "Operations on event"
- name: "publisher"
  description: "Operations on publisher"
- name: "order"
  description: "Operations about an order"
- name: "review"
  description: "Operations about books reviews"


paths:

  /books:
    get:
      tags:
      - "book"
      summary: "Books filter"
      description: "Filter books by specified criteria"
      operationId: "booksGET"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "Filter by name\n"
        type: "string"
      - name: "not_in_stock"
        in: "query"
        description: "If true returns also books not in stock. Default is false."
        type: "boolean"
      - name: "publishers"
        in: "query"
        description: "Filter by publishers' ID\n"
        type: "array"
        items:
          type: "integer"
          format: "int64"
      - name: "authors"
        in: "query"
        description: "Filter by author"
        type: "array"
        items:
          type: "integer"
          format: "int64"
      - name: "ISBN"
        in: "query"
        description: "Filter by ISBN"
        type: "integer"
        format: "int64"
      - name: "min_price"
        in: "query"
        description: "Filter by price higher than value"
        type: "number"
      - name: "max_price"
        in: "query"
        description: "Filter by price lower than value"
        type: "number"
      - name: "genre"
        in: "query"
        description: "Filter by genres"
        type: "array"
        items:
          type: "integer"
          format: "int64"
      - name: "themes"
        in: "query"
        description: "Filter by themes"
        type: "array"
        items:
          type: "integer"
          format: "int64"
      - name: "best_seller"
        in: "query"
        description: "If true returns bestsellers only"
        type: "boolean"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "No books found"
      x-swagger-router-controller: "Book"

  /books/{bookId}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Book"

  /books/{bookId}/related:
    get:
      tags:
      - "book"
      summary: "Books similar to a specific book"
      description: "List of books similar to specified book"
      operationId: "relatedBooksGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the book similar to the ones returned"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Bad Input!"
        404:
          description: "Unexpected error"
      x-swagger-router-controller: "Book"

  /user/login:
    post:
      tags:
      - "user"
      summary: "Login"
      description: "Login with a form"
      operationId: "userLoginPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful login"
        403:
          description: "Wrong username/password"
      x-swagger-router-controller: "User"

  /user/logout:
    post:
      tags:
      - "user"
      summary: "Logout"
      description: "Login with a form"
      operationId: "userLogoutPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful logout"
        400:
          description: "Invalid request (were you logged in?)"


  /user/register:
    post:
      tags:
      - "user"
      summary: "Register"
      description: "Register into the store"
      operationId: "userRegisterPOST"
      consumes:
     # - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful registration"
        403:
          description: "Unauthorized"
    x-swagger-router-controller: "User"

  /user/delete:
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "Delete an user's account"
      operationId: "userDeletePOST"
      responses:
        200:
          description: "Successful deletion!"
        403:
          description: "Unauthorized"
        404:
          description: "User not found"
        400:
          description: "Invalid request"
    x-swagger-router-controller: "User"

  /user/update:
    put:
      tags:
      - "user"
      summary: "Update user's data"
      description: "Put request to modify some of the user's data"
      operationId: "userModifyPUT"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
        403:
          description: "Unathorized"
        400:
          description: "Invalid request"
      x-swagger-router-controller: "User"


  /cart:
    get:
      tags:
      - "cart"
      summary: "View the content of the cart" 
      operationId: "cartGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Cart"
        403:
          description: "Unauthorized"
      x-swagger-router-controller: "Cart"

  /cart/add/{bookId}:
    put:
      tags:
      - "cart"
      summary: "Add/remove elements to the cart"
      operationId: "cartUpdatePUT"
      parameters:
      - name: "bookId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "quantity"
        in: "query"
        type: "integer"
        description: "Number of copies to add to the cart. Default is 1."
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Bad request"
    x-swagger-router-controller: "Cart"

  /cart/remove/{bookId}:
    delete:
      tags:
      - "cart"
      summary: "Remove items from the cart"
      operationId: "cartRemoveDELETE"
      parameters:
      - name: "bookId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "quantity"
        in: "query"
        type: "integer"
        description: "Number of copies to remove from the cart"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Bad request"
    x-swagger-router-controller: "Cart"

  /authors:
    get:
      tags:
      - "author"
      summary: "Get the list of authors"
      operationId: "authorsGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        404:
          description: "Author not found!"
    x-swagger-router-controller: "Author"

  /author/{authorId}:
    get:
      tags:
      - "author"
      summary: "Get an author by ID"
      operationId: "authorIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Author"
        404:
          description: "Author not found!"
      x-swagger-router-controller: "Author"

  /publishers:
    get:
      tags:
      - "publisher"
      summary: "Get all publishers"
      operationId: "publishersGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Publisher"
        404:
          description: "Not found!"
      x-swagger-router-controller: "Publisher"


  /publisher/{publisherId}:
    get:
      tags:
      - "publisher"
      summary: "Get a publisher by Id"
      operationId: "publisherIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "publisherId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        404:
          description: "Publisher not found!"
    x-swagger-router-controller: "Publisher"

  /event/{eventId}:
    get:
      tags:
      - "event"
      summary: "Get an event in wich a book is presented"
      operationId: "eventIdGET"
      produces:
      - "application/json"
      parameters:
        - name: "eventId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event not found!"
      x-swagger-router-controller: "Event"

  /events:
    get:
      tags:
      - "event"
      summary: "Get events filtered"
      operationId: "eventGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operations"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        404:
          description: "No events found!"
        400:
          description: "Invalid request"
    x-swagger-router-controller: "Event"

  /order/create:
    post:
      tags:
      - "order"
      summary: "Place a new order"
      description: "Place a new order from the cart"
      operationId: "orderPlacePOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful placement"
        403:
          description: "Unauthorized"
        400:
          description: "Bad Request"
    x-swagger-router-controller: "Order"

  /book/{bookId}/reviews:
    get:
      tags:
      - "review"
      - "book"
      summary: "Get reviews of a book"
      description: "Given a book Id, returns all the reviews"
      operationId: "bookReviewsGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Id of the book to get the reviews"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "lnimit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "Successful operations"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        404:
          description: "No reviews found!"
        400:
          description: "Invalid request"
    x-swagger-router-controller: "Review"

  /review/{reviewId}:
    get:
      tags:
      - "review"
      summary: "Get a review by Id"
      operationId: "reviewIdGET"
      produces:
      - "application/json"
      parameters:
        - name: "reviewId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Review"
        404:
          description: "Review not found!"
    x-swagger-router-controller: "Review"


definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "Mario"
      surname:
        type: "string"
        example: "Rossi"
      email:
        type: "string"
        format: "email"
      birth_date:
        type: "string"
        format: "date"
      address:
        $ref: "#/definitions/Address"
    title: "User"
    description: "A user of the application."

  Cart:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/User"
      total:
        $ref: "#/definitions/Amount"
      books:
        type: "array"
        items:
          $ref: "#/definitions/Book"
    title: "Cart"
    description: "Order for books"

  
  Book:
    type: "object"
    required:
    - "author"
    - "price"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      title:
        type: "string"
        example: "Il deserto dei tartari"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/Author"
      price:
        $ref: "#/definitions/Amount"
      picture_path:
        type: "string"
        description: "Relative path to a picture representing the book\n"
        example: "pic1.jpg"
      status:
        type: "string"
        description: "Book availability in the inventory"
        enum:
        - "Available"
        - "Out of stock"
        example: "Available"
      genre:
        type: "array"
        items:
          $ref: "#/definitions/Genre"
      theme:
        type: "array"
        items:
          $ref: "#/definitions/Theme"
      average_rating:
        type: "number"
        format: "float"
        minimum: 1
        maximum: 5
        description: "Average rating of the reviews"
    title: "Book"
    description: "A book for sale in the store"

  Amount:
    type: "object"
    required:
    - "currency"
    - "value"
    properties:
      value:
        type: "number"
        format: "double"
        minimum: 0.01
        maximum: 1000000000
      currency:
        $ref: "#/definitions/Currency"
    description: "Price\n"
    example:
      currency: "EUR"
      value: 11

  Currency:
    type: "string"
    pattern: "^[A-Z]{3,3}$"
    description: "Currency international code\n"
    example: "EUR"
  Author:
    type: "object"
    required:
      - "name"
      - "surname"
    properties:
      name:
        type: "string"
        description: "First name of the author\n"
        example: "Mario"
      surname:
        type: "string"
        description: "Surname of the author\n"
        example: "Rossi"
      biography:
        type: "string"
        description: "Short biography of the author\n"
      picture:
        type: "string"
        description: "A portrait of the author\n"
    title: "Author"
    description: "An author that has written or co-written some books in the store"

  Address:
    type: "object"
    required:
      - "id"
      - "street_line1"
      - "street_line2"
      - "city"
      - "zip_code"
      - "country"
    properties:
      address_id:
        type: "integer"
        format: "int64"
        example: 1
      street_line1:
        type: "string"
        example: "Via Valleggio"
      street_line2:
        type: "string"
        example: "11"
      city:
        type: "string"
        example: "Como"
      province:
        type: "string"
        example: "CO"
      zip_code:
        type: "string"
        example: "22100"
      country:
        type: "string"
        example: "Italy"
    title: "Address"
    description: "A complete address template, usable in many contexts of the web app"

  Event:
    type: "object"
    required:
      - "event_id"
      - "location"
      - "name"
      - "date"
    properties:
      event_id:
        type: "integer"
        format: "int64"
        description: "Unique identifier of the event"
        example: 1
      location:
        $ref: "#/definitions/Address"
      name:
        type: "string"
      date:
        type: "string"
        format: "date-time"
    title: "Event"
    description: "An event where some books are presented"

  Publisher:
    type: "object"
    required:
      - "id"
      - "name"
    properties:
      publisher_id:
        type: "integer"
        format: "int64"
        example: 1
      address:
        $ref: "#/definitions/Address"
      name:
        type: "string"
        description: "Name of the editor/publisher"
        example: "Zanichelli"
    title: "Publisher"
    description: "Who edits/publishes a book"

  Genre:
    type: "object"
    required:
    - "genre_id"
    - "name"
    properties:
      genre_id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "Horror"
    title: "Genre"
    description: "The genre of the book"

  Theme:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      description:
        type: "string"
    title: "Theme"
    description: "The theme of the book"

  Review:
    type: "object"
    required:
    - "review_id"
    - "user"
    - "rating"
    - "book"
    properties:
      review_id:
        type: "integer"
        format: "int64"
      user:
        type: "integer"
        format: "int64"
        description: "User id of who wrote the review"
      title:
        type: "string"
        description: "Title of the review"
      text:
        type: "string"
        description: "Content of the review"
      rating:
        type: "integer"
        format: "int64"
        minimum: 1
        maximum: 5
        description: "Rating of the review, expressed in 1 to 5 stars"
      book:
        type: "integer"
        format: "int64"
        description: "Id of the reviewed book"
    title: "Review"
    description: "A review of a book, with rating and optional title and text"


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
# Added by API Auto Mocking Plugin
# host: virtserver.swaggerhub.com
# basePath: /malta895/hypermedia-project/1.0.0
# host: "localhost"
basePath: "/api/"
schemes:
 - https
 - http
